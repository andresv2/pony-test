= Email Spec

A collection of RSpec matchers and Cucumber steps to make testing email with Pony go smoothly.
This project is based on http://github.com/bmabey/email-spec, if you use Rails or ActionMailer, you should use that project instead.
This project aims to make email_spec smaller and easier to understand by elminating default usage of Rails and ActionMailer.

== Setup

Right now, I am including this project into others that need it using git submodules.  Inside your project:

  git submodule add git://github.com/johnmendonca/email-spec.git email_spec

This will create a subdir in your project called email_spec that contains this repository.  To require files from this folder, you may first want to add the <tt>lib</tt> dir to the load path.  For example, from the file <tt>spec/spec_helper.rb</tt> you could add:

  $: << File.join(File.expand_path(File.dirname(__FILE__)), %w{ .. email_spec lib })
  
  ...
  require 'email_spec'

There is no gem for this project now, as there already exists one for the upstream project.

=== Cucumber

To use email_spec in Cucumber include the helpers and matchers in <tt>features/support/env.rb</tt>:

  World do
    include EmailSpec::Helpers
    include EmailSpec::Matchers
  end

This will load all the helpers that the steps rely on. You probably want all emails to be cleared for each scenario:

  Before do
    reset_mailer
  end

Also, copy <tt>email_steps.rb</tt> to <tt>features/step_definitions</tt> to get access to many predifined steps.

=== RSpec

  You will need to include EmailSpec::Helpers and EmailSpec::Matchers in your example groups.
  If you want to have access to the helpers and matchers in all of your examples you can do the following in your spec_helper.rb:

  Spec::Runner.configure do |config|
    config.include(EmailSpec::Helpers)
    config.include(EmailSpec::Matchers)
  end

  Otherwise, you will need to include them in the example groups you wish to use them:

  describe "Signup Email" do
    include EmailSpec::Helpers
    include EmailSpec::Matchers
    ...
  end

  Remember to call <tt>reset_mailer</tt> in a <tt>before</tt> block or whenever you want the emails to be reset.

== Usage

=== Cucumber

  Scenario: A new person signs up
      Given I am at "/"
      When I fill in "Email" with "quentin@example.com"
      And I press "Sign up"
      And I should receive an email
      When I open the email
      Then I should see "confirm" in the email
      When I follow "confirm" in the email
      Then I should see "Confirm your new account"

For more examples, check out examples/rails_root in the source for a small example app that implements these steps.

=== RSpec

  ==== Testing In Isolation ====
    It is often useful to test your mailers in isolation.  You can accomplish this by using mocks to verify that the mailer is being called in the correct place and then write focued examples for the actual mailer.  This is a simple example from the sample app found in the gem:

    Verify that the mailer is used correctly in the controller (this would apply to a model as well):

     describe "POST /signup (#signup)" do
        it "should deliver the signup email" do
          # expect
          UserMailer.should_receive(:deliver_signup).with("email@example.com", "Jimmy Bean")
          # when
          post :signup, "Email" => "email@example.com", "Name" => "Jimmy Bean"
        end
      end

    Examples for the #signup method in UserMailer:

    describe "Signup Email" do
      include EmailSpec::Helpers
      include EmailSpec::Matchers
      include ActionController::UrlWriter

      before(:all) do
        @email = UserMailer.create_signup("jojo@yahoo.com", "Jojo Binks")
      end

      it "should be set to be delivered to the email passed in" do
        @email.should deliver_to("jojo@yahoo.com")
      end

      it "should contain the user's message in the mail body" do
        @email.should have_text(/Jojo Binks/)
      end

      it "should contain a link to the confirmation link" do
        @email.should have_text(/#{confirm_account_url}/)
      end

      it "should have the correct subject" do
        @email.should have_subject(/Account confirmation/)
      end

    end

    ==== Using the helpers when not testing in isolation ====

      Don't. :)  Seriously, if you do just take a look at the helpers and use them as you wish.

== Original Authors

Ben Mabey, Aaron Gibralter, Mischa Fierer

Please see History.txt for upcoming changsets and other contributors.
