= Pony-Test

A collection of helper methods and Cucumber steps to make testing email with Pony a piece of cake.
It works simply by overwriting the Pony mail method with one that stores the email in an array instead of sending it.
You can access this email with the helper methods and perform whatever checks you want.

== Installation

  gem install pony-test

== Setup

In your test environment:

  require 'pony-test'

=== Cucumber

To use pony-test in Cucumber include the helpers in <tt>features/support/env.rb</tt>:

  World do
    ...
    include Pony::TestHelpers
  end

You probably want all emails to be cleared for each scenario:

  Before do
    reset_mailer
  end

To use the Cucumber steps, you will need to copy <tt>lib/email_steps.rb</tt> from the gem or github to <tt>features/step_definitions</tt>.

=== RSpec

You will need to include Pony::TestHelpers in your example groups.
If you want to have access to the helpers in all of your examples you can do the following in your <tt>spec_helper.rb</tt>:

  Spec::Runner.configure do |config|
    config.include(Pony::TestHelpers)
  end

Otherwise, you will need to include them in the example groups you wish to use them:

  describe "Signup Email" do
    include Pony::TestHelpers
    ...
  end

Remember to call <tt>reset_mailer</tt> in a <tt>before</tt> block or whenever you want the emails to be reset.

== Usage

=== Helper methods

<tt>deliveries</tt>, <tt>all_email</tt> returns the whole array of emails

<tt>current_email</tt> returns either the last email sent, or the last email "opened"

<tt>current_email_address</tt> returns the last address used in a lookup operation

<tt>reset_mailer</tt> clears everything

<tt>last_email_sent</tt> "opens" the last email sent

<tt>inbox</tt>, <tt>inbox_for</tt> returns all emails, filterable by address, pass the option <tt>:address => 'foo@example.com'</tt>

<tt>open_email</tt>, <tt>open_email_for</tt> "opens" the first email matching all criteria, accepts options <tt>:address</tt>, <tt>:with_subject</tt>, and <tt>:with_body</tt>

<tt>find_email</tt>, <tt>find_email_for</tt> returns all email matching all criteria, accepts options <tt>:address</tt>, <tt>:with_subject</tt>, and <tt>:with_body</tt> 

<tt>email_links</tt> returns all links in an email body, searching <tt>current_email</tt> by default

<tt>email_links_matching</tt> returns all links matching a pattern

=== Cucumber

  Scenario: A new person signs up
      Given I am at "/"
      When I fill in "Email" with "quentin@example.com"
      And I press "Sign up"
      Then I should have an email
      And I should see "confirm" in the email body

      When I visit "confirm" in the email
      Then I should see "Confirm your new account"

Please read <tt>lib/email_steps.rb</tt> for the rest.  For more examples, check out the <tt>examples</tt> folder for a small example app that implements the steps.

== Acknowledgements

This project is a major simplification and rewrite of the Email-Spec project:

http://github.com/bmabey/email-spec

If you are a Rails/ActionMailer user, you may want to check it out.
